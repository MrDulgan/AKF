#!/bin/bash

# Enhanced AK Server Stop Script
# Developer: Dulgan

# Color codes
GREEN='\e[1;32m'
BLUE='\e[0;36m'
RED='\e[0;31m'
YELLOW='\e[1;33m'
PURPLE='\e[0;35m'
NC='\e[0m' # No Color

# Configuration
INSTALL_DIR="/root/hxsy"
LOG_DIR="$INSTALL_DIR/Logs"
CURRENT_DATE=$(date +%Y-%m-%d)
GRACEFUL_TIMEOUT=15
FORCE_TIMEOUT=5

# Introductory message
echo -e "${PURPLE}=================================================="
echo -e "         Enhanced AK Server Stop Script           "
echo -e "               Developer: Dulgan                 "
echo -e "==================================================${NC}"

# Database connection cleanup
cleanup_database_connections() {
    echo -e "${BLUE}>> Cleaning up database connections...${NC}"
    local config_file="$INSTALL_DIR/setup.ini"
    
    if [[ -f "$config_file" ]]; then
        local db_pass=$(grep "^AccountDBPW=" "$config_file" | cut -d'=' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        if [[ -n "$db_pass" ]]; then
            # Close idle connections
            PGPASSWORD="$db_pass" psql -U postgres -h localhost -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE state = 'idle' AND application_name LIKE '%Server%';" >/dev/null 2>&1
            echo -e "${GREEN}>> Database connections cleaned up.${NC}"
        else
            echo -e "${YELLOW}>> Could not find database password for cleanup.${NC}"
        fi
    else
        echo -e "${YELLOW}>> Configuration file not found for database cleanup.${NC}"
    fi
}

# Enhanced log directory management
setup_log_management() {
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR" || { echo -e "${RED}>> Failed to create log directory.${NC}"; exit 1; }
        echo -e "${GREEN}>> Log directory created: $LOG_DIR${NC}"
    else
        echo -e "${BLUE}>> Log directory exists: $LOG_DIR${NC}"
    fi
}

# Enhanced server stopping with graceful timeout
stop_server() {
    local server_name="$1"
    echo -e "${BLUE}>> Attempting to stop $server_name...${NC}"
    
    # Check if server is running
    if ! pgrep -f "$server_name" > /dev/null; then
        echo -e "${YELLOW}>> $server_name is not running.${NC}"
        return 0
    fi
    
    # Get PID for monitoring
    local server_pid=$(pgrep -f "$server_name" | head -n1)
    
    # Send TERM signal for graceful shutdown
    pkill -TERM -f "$server_name" 2>/dev/null
    
    # Wait for graceful shutdown
    local waited=0
    while [ $waited -lt $GRACEFUL_TIMEOUT ]; do
        if ! pgrep -f "$server_name" > /dev/null; then
            echo -e "${GREEN}>> $server_name stopped gracefully.${NC}"
            return 0
        fi
        sleep 1
        waited=$((waited + 1))
    done
    
    # If still running, send INT signal
    echo -e "${YELLOW}>> $server_name did not stop gracefully, sending interrupt...${NC}"
    pkill -INT -f "$server_name" 2>/dev/null
    
    # Wait for interrupt shutdown
    waited=0
    while [ $waited -lt $FORCE_TIMEOUT ]; do
        if ! pgrep -f "$server_name" > /dev/null; then
            echo -e "${GREEN}>> $server_name stopped after interrupt.${NC}"
            return 0
        fi
        sleep 1
        waited=$((waited + 1))
    done
    
    # Force kill if necessary
    echo -e "${RED}>> $server_name did not respond, forcing termination.${NC}"
    pkill -KILL -f "$server_name" 2>/dev/null
    sleep 2
    
    if pgrep -f "$server_name" > /dev/null; then
        echo -e "${RED}>> Warning: $server_name may still be running.${NC}"
        return 1
    else
        echo -e "${GREEN}>> $server_name forcefully terminated.${NC}"
        return 0
    fi
}

# Enhanced server log management
move_server_logs() {
    local server_name="$1"
    local log_count=0
    
    # Move various log file patterns
    for pattern in "*.log.*" "*.log" "*.txt"; do
        find "$INSTALL_DIR/$server_name" -type f -name "$pattern" -print0 2>/dev/null | while IFS= read -r -d '' log_file; do
            if [[ -f "$log_file" ]]; then
                base_log_file=$(basename "$log_file")
                mv "$log_file" "$LOG_DIR/${server_name}_${CURRENT_DATE}_${base_log_file}" 2>/dev/null
                log_count=$((log_count + 1))
            fi
        done
    done
    
    if [ $log_count -gt 0 ]; then
        echo -e "${GREEN}   - Moved $log_count log files for $server_name${NC}"
    fi
}

# Enhanced log cleanup
enhanced_log_cleanup() {
    echo -e "${BLUE}>> Performing enhanced log cleanup...${NC}"
    
    # Clean old application logs (keep last 7 days)
    find "$LOG_DIR" -mindepth 1 -maxdepth 1 ! -name 'Startup' -type f -mtime +7 -delete 2>/dev/null
    
    # Compress old logs (older than 1 day)
    find "$LOG_DIR" -mindepth 1 -maxdepth 1 ! -name 'Startup' -type f -name "*.log*" -mtime +1 ! -name "*.gz" -exec gzip {} \; 2>/dev/null
    
    # Clean core dumps
    find "$INSTALL_DIR" -name "core.*" -type f -delete 2>/dev/null
    
    echo -e "${GREEN}>> Enhanced log cleanup completed.${NC}"
}

# System cleanup
perform_system_cleanup() {
    echo -e "${BLUE}>> Performing system cleanup...${NC}"
    
    # Clear shared memory segments that might be left by servers
    ipcs -m | grep "^0x" | awk '{print $2}' | xargs -I {} ipcrm -m {} 2>/dev/null
    
    # Clear any semaphores
    ipcs -s | grep "^0x" | awk '{print $2}' | xargs -I {} ipcrm -s {} 2>/dev/null
    
    echo -e "${GREEN}>> System cleanup completed.${NC}"
}

# Main execution
setup_log_management

# Stop servers in reverse dependency order for safe shutdown
SERVERS=( "ZoneServer" "WorldServer" "MissionServer" "LoginServer" "GatewayServer" "TicketServer" )

echo -e "${BLUE}>> Stopping servers in safe order...${NC}"
START_TIME=$(date +%s)

for server in "${SERVERS[@]}"; do
    stop_server "$server"
    move_server_logs "$server"
done

# Cleanup operations
cleanup_database_connections
enhanced_log_cleanup
perform_system_cleanup

# Final status check
running_servers=()
for server in "${SERVERS[@]}"; do
    if pgrep -f "$server" > /dev/null; then
        running_servers+=("$server")
    fi
done

if [ ${#running_servers[@]} -eq 0 ]; then
    echo -e "${GREEN}
==================================================
         All Servers Stopped Successfully
==================================================${NC}"
    echo -e "${BLUE}>> Shutdown completed in $(($(date +%s) - START_TIME)) seconds.${NC}"
    echo -e "${BLUE}>> All logs have been moved to: $LOG_DIR${NC}"
else
    echo -e "${YELLOW}
==================================================
       Warning: Some Servers Still Running
==================================================${NC}"
    echo -e "${RED}Still running: ${running_servers[*]}${NC}"
    echo -e "${YELLOW}You may need to manually kill these processes.${NC}"
fi
