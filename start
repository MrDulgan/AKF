#!/bin/bash

# Enhanced AK Server Startup Script
# Developer: Dulgan

# Color codes
GREEN='\e[1;32m'
BLUE='\e[0;36m'
RED='\e[0;31m'
YELLOW='\e[1;33m'
PURPLE='\e[0;35m'
NC='\e[0m' # No Color

# Configuration
INSTALL_DIR="/root/hxsy"
MAX_STARTUP_TIME=30
HEALTH_CHECK_INTERVAL=2
DATABASE_CHECK_TIMEOUT=10

# Set locale
export LC_ALL=C

# Check for multi-channel configuration
check_multi_channel() {
    echo -e "${BLUE}>> Checking for multi-channel configuration...${NC}"
    local channel_configs=()
    
    # Find all channel configuration files
    for config in "$INSTALL_DIR"/config_channel_*.ini; do
        if [[ -f "$config" ]]; then
            channel_configs+=("$config")
        fi
    done
    
    if [[ ${#channel_configs[@]} -gt 0 ]]; then
        echo -e "${GREEN}>> Found ${#channel_configs[@]} additional channel(s):${NC}"
        for config in "${channel_configs[@]}"; do
            local channel_name=$(basename "$config" .ini | sed 's/config_channel_/Channel /')
            echo -e "${GREEN}   - $channel_name${NC}"
        done
        echo -e "${YELLOW}>> Note: Multi-channel support active. Channels will be available in-game.${NC}"
    else
        echo -e "${BLUE}>> Single channel mode (Aurora-Ch01 only).${NC}"
    fi
}

# Dependency check
check_dependencies() {
    echo -e "${BLUE}>> Checking system dependencies...${NC}"
    local missing=0
    
    for cmd in psql pgrep pkill ss; do
        if ! command -v "$cmd" &> /dev/null; then
            echo -e "${RED}- Command '$cmd' not found.${NC}"
            missing=1
        fi
    done
    
    if [ "$missing" -eq 1 ]; then
        echo -e "${RED}[ERROR] Missing required dependencies. Please install them.${NC}"
        exit 1
    fi
    echo -e "${GREEN}>> Dependencies check passed.${NC}"
}

# Database connectivity check
check_database_connection() {
    echo -e "${BLUE}>> Checking database connectivity...${NC}"
    local config_file="$INSTALL_DIR/setup.ini"
    
    if [[ -f "$config_file" ]]; then
        local db_pass=$(grep "^AccountDBPW=" "$config_file" | cut -d'=' -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        if [[ -n "$db_pass" ]]; then
            local timeout_cmd="timeout $DATABASE_CHECK_TIMEOUT"
            if $timeout_cmd bash -c "PGPASSWORD='$db_pass' psql -U postgres -h localhost -d FFAccount -c 'SELECT 1;' >/dev/null 2>&1"; then
                echo -e "${GREEN}>> Database connection successful.${NC}"
                return 0
            else
                echo -e "${YELLOW}[WARNING] Database connection failed. Servers may not start properly.${NC}"
                return 1
            fi
        else
            echo -e "${YELLOW}[WARNING] Database password not found in config.${NC}"
            return 1
        fi
    else
        echo -e "${YELLOW}[WARNING] Configuration file not found: $config_file${NC}"
        return 1
    fi
}

# System resource check
check_system_resources() {
    echo -e "${BLUE}>> Checking system resources...${NC}"
    
    # Memory check (at least 2GB available)
    local available_mem=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
    local required_mem=2097152  # 2GB in KB
    
    if [[ "$available_mem" -lt "$required_mem" ]]; then
        echo -e "${YELLOW}[WARNING] Low memory: $(($available_mem/1024))MB available, 2GB recommended.${NC}"
    else
        echo -e "${GREEN}>> Memory check passed: $(($available_mem/1024))MB available.${NC}"
    fi
    
    # Disk space check
    local available_disk=$(df "$INSTALL_DIR" | tail -1 | awk '{print $4}')
    local required_disk=1048576  # 1GB in KB
    
    if [[ "$available_disk" -lt "$required_disk" ]]; then
        echo -e "${YELLOW}[WARNING] Low disk space: $(($available_disk/1024))MB available.${NC}"
    else
        echo -e "${GREEN}>> Disk space check passed: $(($available_disk/1024))MB available.${NC}"
    fi
}

# Enhanced log directory setup
setup_logging() {
    local log_dir="$INSTALL_DIR/Logs/Startup"
    if [ ! -d "$log_dir" ]; then
        mkdir -p "$log_dir" || { echo -e "${RED}>> Failed to create log directory.${NC}"; exit 1; }
        echo -e "${GREEN}>> Startup directory created: $log_dir${NC}"
    else
        echo -e "${BLUE}>> Startup directory exists: $log_dir${NC}"
    fi

    # Define log file with timestamp
    LOGFILE="$log_dir/startup_logs_$(date +%Y%m%d_%H%M%S).log"
    touch "$LOGFILE"
    
    # Clean old log files (keep last 10)
    find "$log_dir" -name "startup_logs_*.log" -type f | sort -r | tail -n +11 | xargs rm -f 2>/dev/null
}

# Introductory message
echo -e "${PURPLE}=================================================="
echo -e "         Enhanced AK Server Startup Script       "
echo -e "               Developer: Dulgan                 "
echo -e "==================================================${NC}" | tee -a "$LOGFILE"

# Pre-flight checks
check_dependencies
check_system_resources
setup_logging
check_database_connection
check_multi_channel

# Stop any running servers before starting
echo -e "${BLUE}>> Stopping any existing server processes...${NC}" | tee -a "$LOGFILE"
for srv in ZoneServer WorldServer MissionServer LoginServer GatewayServer TicketServer; do
    if pgrep -f "$srv" > /dev/null; then
        echo -e "${YELLOW}   - Stopping existing $srv process...${NC}" | tee -a "$LOGFILE"
        pkill -TERM -f "$srv" 2>/dev/null
        sleep 2
        if pgrep -f "$srv" > /dev/null; then
            pkill -KILL -f "$srv" 2>/dev/null
        fi
    fi
done
sleep 3

# Function to handle CTRL+C
trap_ctrlc() {
    echo -e "\n${RED}>> CTRL+C detected, stopping the server...${NC}" | tee -a "$LOGFILE"
    "$INSTALL_DIR/stop"
    exit 0
}
trap trap_ctrlc INT

# Enhanced server health check
check_server_health() {
    local server_name="$1"
    local pid="$2"
    local max_checks=10
    local check_count=0
    
    while [ $check_count -lt $max_checks ]; do
        if ps -p "$pid" > /dev/null 2>&1; then
            # Check if process is actually working (not zombie)
            local proc_stat=$(cat "/proc/$pid/stat" 2>/dev/null | awk '{print $3}')
            if [[ "$proc_stat" != "Z" ]]; then
                return 0  # Healthy
            fi
        fi
        sleep $HEALTH_CHECK_INTERVAL
        check_count=$((check_count + 1))
    done
    return 1  # Unhealthy
}

# Function to start a server with enhanced monitoring
declare -A SERVER_PIDS
start_server() {
    local server_path="$1"
    local server_exec="$2"
    local port="$3"

    echo -e "${BLUE}>> Starting $server_exec...${NC}" | tee -a "$LOGFILE"
    
    cd "$server_path" || { echo -e "${RED}>> Cannot access $server_path.${NC}" | tee -a "$LOGFILE"; exit 1; }
    chmod 755 "$server_exec"

    # Check if server is already running
    if pgrep -f "$server_exec" > /dev/null; then
        echo -e "${YELLOW}>> $server_exec is already running. Skipping start.${NC}" | tee -a "$LOGFILE"
        return
    fi

    # Verify server binary exists and is executable
    if [[ ! -x "./$server_exec" ]]; then
        echo -e "${RED}>> Server binary $server_exec not found or not executable.${NC}" | tee -a "$LOGFILE"
        exit 1
    fi

    # Start server with optional port
    if [[ -n "$port" ]]; then
        echo -e "${BLUE}   - Starting with port $port...${NC}" | tee -a "$LOGFILE"
        nohup ./"$server_exec" -p "$port" >>"$LOGFILE" 2>&1 &
    else
        nohup ./"$server_exec" >>"$LOGFILE" 2>&1 &
    fi

    local pid=$!
    SERVER_PIDS["$server_exec"]=$pid

    # Enhanced health check
    if check_server_health "$server_exec" "$pid"; then
        echo -e "${GREEN}>> $server_exec started successfully with PID $pid.${NC}" | tee -a "$LOGFILE"
        
        # Additional port verification if specified
        if [[ -n "$port" ]]; then
            sleep 3
            if ss -tuln | grep ":$port " > /dev/null 2>&1; then
                echo -e "${GREEN}   - Port $port is listening.${NC}" | tee -a "$LOGFILE"
            else
                echo -e "${YELLOW}   - Warning: Port $port is not listening yet.${NC}" | tee -a "$LOGFILE"
            fi
        fi
    else
        echo -e "${RED}>> $server_exec failed to start or is unhealthy.${NC}" | tee -a "$LOGFILE"
        exit 1
    fi
    
    # Wait between server starts for stability
    sleep 5
}

# Record start time
START_TIME=$(date +%s)

echo -e "${GREEN}>> Starting AK servers in optimized order...${NC}" | tee -a "$LOGFILE"

# Start servers in dependency order for optimal startup
start_server "$INSTALL_DIR/TicketServer/" "TicketServer" "7777"
start_server "$INSTALL_DIR/GatewayServer/" "GatewayServer"
start_server "$INSTALL_DIR/LoginServer/" "LoginServer"
start_server "$INSTALL_DIR/MissionServer/" "MissionServer"
start_server "$INSTALL_DIR/WorldServer/" "WorldServer"
start_server "$INSTALL_DIR/ZoneServer/" "ZoneServer"

echo -e "${GREEN}>> All servers started successfully!${NC}" | tee -a "$LOGFILE"
echo -e "${BLUE}>> Server startup completed in $(($(date +%s) - START_TIME)) seconds.${NC}" | tee -a "$LOGFILE"

# Final status and management information
echo -e "${PURPLE}
==================================================
            Server Startup Complete!
==================================================${NC}"
echo -e "${GREEN}>> All AK server components are now running.${NC}"
echo -e "${BLUE}>> Server logs are being written to: $INSTALL_DIR/Logs/${NC}"
echo -e "${BLUE}>> Startup log saved to: $LOGFILE${NC}"

echo -e "${YELLOW}
>> Management Tools Available:${NC}"
echo -e "${GREEN}   • Monitor server status    : ./monitor.sh${NC}"
echo -e "${GREEN}   • Backup server data       : ./backup.sh${NC}"
echo -e "${GREEN}   • Restore server data      : ./restore.sh${NC}"
echo -e "${GREEN}   • Create game accounts     : ./account_creator.sh${NC}"
echo -e "${GREEN}   • AKUTools suite          : ./akutools${NC}"
echo -e "${GREEN}   • Stop server              : ./stop${NC}"

# Check if AKUTools is available
if [ -f "./akutools" ]; then
    echo -e "${BLUE}
>> Advanced Management (AKUTools):${NC}"
    echo -e "${GREEN}   • Multi-server management  : /root/AKUTools/multi_server_manager.sh${NC}"
    echo -e "${GREEN}   • Multi-channel management : /root/AKUTools/multi_channel_manager.sh${NC}"
fi

echo -e "${PURPLE}
>> The server is now running in the background.
>> You can safely close this terminal or use it for other tasks.
>> Use './stop' to shutdown the server when needed.
==================================================${NC}"

# Quick server status check
echo -e "${BLUE}>> Quick Status Check:${NC}"
local active_servers=0
for server in "${!SERVER_PIDS[@]}"; do
    pid=${SERVER_PIDS[$server]}
    if ps -p $pid > /dev/null 2>&1; then
        echo -e "${GREEN}   ✓ $server (PID: $pid)${NC}"
        ((active_servers++))
    else
        echo -e "${RED}   ✗ $server (not running)${NC}"
    fi
done

echo -e "${GREEN}>> $active_servers out of ${#SERVER_PIDS[@]} servers are running.${NC}"

# Save PID information for management scripts
cat > "$INSTALL_DIR/.server_pids" << EOF
# Server PID information - $(date)
# Format: SERVER_NAME=PID
$(for server in "${!SERVER_PIDS[@]}"; do echo "$server=${SERVER_PIDS[$server]}"; done)
EOF

echo -e "${BLUE}>> Server PID information saved to $INSTALL_DIR/.server_pids${NC}"
echo -e "${YELLOW}>> Happy gaming! The server is ready for connections.${NC}"
