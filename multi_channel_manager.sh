#!/bin/bash

# Multi-Channel Manager for AKF
# Developer: Dulgan
# This script allows you to add multiple channels to the same server

# Color codes
RED='\e[0;31m'
GREEN='\e[1;32m'
BLUE='\e[0;36m'
YELLOW='\e[1;33m'
PURPLE='\e[0;35m'
NC='\e[0m'

# Configuration
SERVER_PATH="/root/hxsy"
CONFIG_FILE="/root/multi_channel.conf"
DB_USER="postgres"

# Base world configuration
BASE_WORLD_ID=1010
BASE_WORLD_NAME="Aurora"
BASE_PORT=5567
BASE_ZONESERVER_ID=1011

# Load existing configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        # Initialize empty arrays
        CHANNELS=()
        CHANNEL_IDS=()
        CHANNEL_PORTS=()
        CHANNEL_ZONE_IDS=()
    fi
}

# Save configuration
save_config() {
    cat > "$CONFIG_FILE" << EOF
# Multi-Channel Configuration
# Generated by AKF Multi-Channel Manager

CHANNELS=($(printf '"%s" ' "${CHANNELS[@]}"))
CHANNEL_IDS=($(printf '"%s" ' "${CHANNEL_IDS[@]}"))
CHANNEL_PORTS=($(printf '"%s" ' "${CHANNEL_PORTS[@]}"))
CHANNEL_ZONE_IDS=($(printf '"%s" ' "${CHANNEL_ZONE_IDS[@]}"))
EOF
    echo -e "${GREEN}>> Channel configuration saved to $CONFIG_FILE${NC}"
}

# Calculate channel parameters
calculate_channel_params() {
    local channel_num="$1"
    local world_id=$((BASE_WORLD_ID + channel_num))
    local port=$((BASE_PORT + channel_num))
    local zone_id=$((BASE_ZONESERVER_ID + channel_num))
    
    echo "$world_id $port $zone_id"
}

# Create new channel
create_channel() {
    local channel_num="$1"
    local channel_name="Ch$(printf "%02d" $((channel_num + 1)))"
    
    echo -e "${BLUE}
==================================================
           Creating New Channel
           Channel: $BASE_WORLD_NAME-$channel_name
           Channel Number: $channel_num
==================================================${NC}"
    
    # Calculate parameters
    local params=($(calculate_channel_params "$channel_num"))
    local world_id="${params[0]}"
    local port="${params[1]}" 
    local zone_id="${params[2]}"
    
    echo -e "${BLUE}>> Channel will have:${NC}"
    echo -e "${BLUE}   - World ID: $world_id${NC}"
    echo -e "${BLUE}   - Port: $port${NC}"
    echo -e "${BLUE}   - Zone Server ID: $zone_id${NC}"
    echo -e "${BLUE}   - Name: $BASE_WORLD_NAME-$channel_name${NC}"
    
    # Confirm creation
    read -p "Continue with channel creation? (y/N): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        echo -e "${YELLOW}>> Channel creation cancelled.${NC}"
        return 1
    fi
    
    # Read database password
    read -s -p "Enter PostgreSQL password: " db_pass
    echo
    
    # Add to worlds table
    echo -e "${BLUE}>> Adding channel to worlds table...${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFAccount -c "
        INSERT INTO worlds (id, name, ip, port, online_user, maxnum_user, state, version, show_order, green_level, red_level)
        VALUES ($world_id, '$BASE_WORLD_NAME-$channel_name', '127.0.0.1', $port, 0, 800, 1, '015.001.01.16', $channel_num, 5, 50)
        ON CONFLICT (id) DO UPDATE SET 
            name = '$BASE_WORLD_NAME-$channel_name',
            ip = '127.0.0.1',
            port = $port,
            show_order = $channel_num;
    " >/dev/null 2>&1
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}   - Channel added to worlds table successfully${NC}"
    else
        echo -e "${RED}   - Failed to add channel to worlds table${NC}"
        return 1
    fi
    
    # Add to serverstatus table
    echo -e "${BLUE}>> Adding channel to serverstatus table...${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        INSERT INTO serverstatus (id, name, ext_address, ext_port, int_address, int_port, last_start_time, last_vip_mail_time)
        VALUES ($world_id, 'WorldServer-$channel_name', '127.0.0.1', $port, '127.0.0.1', $((port + 1)), 0, 0)
        ON CONFLICT (id) DO UPDATE SET 
            name = 'WorldServer-$channel_name',
            ext_address = '127.0.0.1',
            ext_port = $port,
            int_address = '127.0.0.1',
            int_port = $((port + 1));
    " >/dev/null 2>&1
    
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        INSERT INTO serverstatus (id, name, ext_address, ext_port, int_address, int_port, last_start_time, last_vip_mail_time)
        VALUES ($zone_id, 'ZoneServer-$channel_name', '127.0.0.1', $((port + 10)), '127.0.0.1', $((port + 11)), 0, 0)
        ON CONFLICT (id) DO UPDATE SET 
            name = 'ZoneServer-$channel_name',
            ext_address = '127.0.0.1',
            ext_port = $((port + 10)),
            int_address = '127.0.0.1',
            int_port = $((port + 11));
    " >/dev/null 2>&1
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}   - Channel added to serverstatus table successfully${NC}"
    else
        echo -e "${RED}   - Failed to add channel to serverstatus table${NC}"
        return 1
    fi
    
    # Create configuration files for this channel
    echo -e "${BLUE}>> Creating channel configuration files...${NC}"
    create_channel_configs "$channel_num" "$world_id" "$port" "$zone_id" "$channel_name"
    
    # Add to local configuration
    CHANNELS+=("$channel_name")
    CHANNEL_IDS+=("$world_id")
    CHANNEL_PORTS+=("$port")
    CHANNEL_ZONE_IDS+=("$zone_id")
    save_config
    
    echo -e "${GREEN}
==================================================
           Channel Created Successfully!
==================================================${NC}"
    echo -e "Channel: ${GREEN}$BASE_WORLD_NAME-$channel_name${NC}"
    echo -e "World ID: ${GREEN}$world_id${NC}"
    echo -e "Port: ${GREEN}$port${NC}"
    echo -e "Zone Server ID: ${GREEN}$zone_id${NC}"
    echo -e "\nTo start all channels, restart the server:"
    echo -e "  ${BLUE}$SERVER_PATH/stop && $SERVER_PATH/start${NC}"
}

# Create channel-specific configuration files
create_channel_configs() {
    local channel_num="$1"
    local world_id="$2"
    local port="$3"
    local zone_id="$4"
    local channel_name="$5"
    
    # Create additional config file for this channel
    local config_file="$SERVER_PATH/config_channel_${channel_num}.ini"
    
    cat > "$config_file" << EOF
# Channel Configuration for $BASE_WORLD_NAME-$channel_name
# Auto-generated by Multi-Channel Manager

[CHANNEL_$channel_num]
WorldID=$world_id
WorldName=$BASE_WORLD_NAME-$channel_name
WorldPort=$port
ZoneServerID=$zone_id
CrossWorldID=$world_id
TerritoryWorldID=$world_id
ColosseumWorldID=$world_id
WarCampWorldID=$world_id
FamilyWarWorldID=$world_id
ManorRanchWorldID=$world_id
RaidBattleWorldID=$world_id

# Server settings
MaxPlayers=800
GreenLevel=5
RedLevel=50
ShowOrder=$channel_num
State=1
Version=015.001.01.16
EOF
    
    echo -e "${GREEN}   - Created configuration: $config_file${NC}"
}

# List all channels
list_channels() {
    echo -e "${BLUE}
==================================================
           Multi-Channel Status
==================================================${NC}"
    
    # Read database password
    read -s -p "Enter PostgreSQL password to check database status: " db_pass
    echo
    
    echo -e "${GREEN}Base Channel (Ch01):${NC}"
    echo -e "  World ID: $BASE_WORLD_ID"
    echo -e "  Name: $BASE_WORLD_NAME-Ch01"
    echo -e "  Port: $BASE_PORT"
    echo -e "  Zone Server ID: $BASE_ZONESERVER_ID"
    
    # Get database info
    local db_info=$(PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFAccount -t -c "SELECT name, port, online_user, maxnum_user FROM worlds WHERE id = $BASE_WORLD_ID;" 2>/dev/null | xargs)
    if [[ -n "$db_info" ]]; then
        local info_array=($db_info)
        echo -e "  Database Status: ${GREEN}Connected${NC}"
        echo -e "  Online Players: ${info_array[2]}/${info_array[3]}"
    else
        echo -e "  Database Status: ${RED}Error${NC}"
    fi
    echo ""
    
    if [[ ${#CHANNELS[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No additional channels configured.${NC}"
        return
    fi
    
    for i in "${!CHANNELS[@]}"; do
        local channel="${CHANNELS[$i]}"
        local world_id="${CHANNEL_IDS[$i]}"
        local port="${CHANNEL_PORTS[$i]}"
        local zone_id="${CHANNEL_ZONE_IDS[$i]}"
        
        echo -e "${GREEN}Channel: $BASE_WORLD_NAME-$channel${NC}"
        echo -e "  World ID: $world_id"
        echo -e "  Port: $port"
        echo -e "  Zone Server ID: $zone_id"
        
        # Get database info
        local db_info=$(PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFAccount -t -c "SELECT name, port, online_user, maxnum_user FROM worlds WHERE id = $world_id;" 2>/dev/null | xargs)
        if [[ -n "$db_info" ]]; then
            local info_array=($db_info)
            echo -e "  Database Status: ${GREEN}Connected${NC}"
            echo -e "  Online Players: ${info_array[2]}/${info_array[3]}"
        else
            echo -e "  Database Status: ${RED}Error${NC}"
        fi
        echo ""
    done
}

# Remove channel
remove_channel() {
    local channel_name="$1"
    
    echo -e "${RED}
==================================================
           WARNING: Channel Removal
==================================================${NC}"
    echo -e "${RED}This will permanently delete channel: $channel_name${NC}"
    echo -e "${RED}Including database entries!${NC}"
    
    read -p "Type 'DELETE' to confirm removal: " confirm
    if [[ "$confirm" != "DELETE" ]]; then
        echo -e "${YELLOW}>> Channel removal cancelled.${NC}"
        return 1
    fi
    
    for i in "${!CHANNELS[@]}"; do
        if [[ "${CHANNELS[$i]}" == "$channel_name" ]]; then
            local world_id="${CHANNEL_IDS[$i]}"
            local zone_id="${CHANNEL_ZONE_IDS[$i]}"
            
            # Read database password
            read -s -p "Enter PostgreSQL password: " db_pass
            echo
            
            # Remove from worlds table
            echo -e "${BLUE}>> Removing from worlds table...${NC}"
            PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFAccount -c "DELETE FROM worlds WHERE id = $world_id;" >/dev/null 2>&1
            
            # Remove from serverstatus table
            echo -e "${BLUE}>> Removing from serverstatus table...${NC}"
            PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "DELETE FROM serverstatus WHERE id IN ($world_id, $zone_id);" >/dev/null 2>&1
            
            # Remove configuration file
            local config_file="$SERVER_PATH/config_channel_${i}.ini"
            if [[ -f "$config_file" ]]; then
                rm -f "$config_file"
                echo -e "${BLUE}>> Removed configuration file: $config_file${NC}"
            fi
            
            # Remove from local configuration
            unset CHANNELS[$i]
            unset CHANNEL_IDS[$i]
            unset CHANNEL_PORTS[$i]
            unset CHANNEL_ZONE_IDS[$i]
            
            # Rebuild arrays
            CHANNELS=("${CHANNELS[@]}")
            CHANNEL_IDS=("${CHANNEL_IDS[@]}")
            CHANNEL_PORTS=("${CHANNEL_PORTS[@]}")
            CHANNEL_ZONE_IDS=("${CHANNEL_ZONE_IDS[@]}")
            
            save_config
            
            echo -e "${GREEN}>> Channel $channel_name removed successfully.${NC}"
            echo -e "${YELLOW}>> Please restart server to apply changes.${NC}"
            return
        fi
    done
    
    echo -e "${RED}>> Channel not found: $channel_name${NC}"
}

# Show menu
show_menu() {
    echo -e "${BLUE}
==================================================
           AKF Multi-Channel Manager
           Developer: Dulgan
==================================================${NC}"
    echo -e "1. List all channels"
    echo -e "2. Create new channel"
    echo -e "3. Remove channel"
    echo -e "4. Show database info"
    echo -e "5. Exit"
    echo ""
}

# Show database information
show_database_info() {
    echo -e "${BLUE}
==================================================
           Database Channel Information
==================================================${NC}"
    
    read -s -p "Enter PostgreSQL password: " db_pass
    echo
    
    echo -e "${GREEN}FFAccount.worlds table:${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFAccount -c "
        SELECT id, name, ip, port, online_user, maxnum_user, state, show_order 
        FROM worlds 
        ORDER BY show_order;
    " 2>/dev/null || echo -e "${RED}Failed to connect to database${NC}"
    
    echo -e "\n${GREEN}FFDB1.serverstatus table (World/Zone servers):${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        SELECT id, name, ext_address, ext_port, int_address, int_port 
        FROM serverstatus 
        WHERE name LIKE 'WorldServer%' OR name LIKE 'ZoneServer%'
        ORDER BY id;
    " 2>/dev/null || echo -e "${RED}Failed to connect to database${NC}"
}

# Main execution
load_config

if [[ $# -gt 0 ]]; then
    case "$1" in
        "list")
            list_channels
            ;;
        "create")
            if [[ -n "$2" ]]; then
                create_channel "$2"
            else
                echo -e "${RED}>> Please provide channel number: $0 create <channel_number>${NC}"
                echo -e "${YELLOW}>> Example: $0 create 1  (creates Ch02)${NC}"
            fi
            ;;
        "remove")
            if [[ -n "$2" ]]; then
                remove_channel "$2"
            else
                echo -e "${RED}>> Please provide channel name: $0 remove <channel_name>${NC}"
                echo -e "${YELLOW}>> Example: $0 remove Ch02${NC}"
            fi
            ;;
        "info")
            show_database_info
            ;;
        *)
            echo -e "${RED}>> Invalid command. Use: list, create, remove, info${NC}"
            ;;
    esac
    exit 0
fi

# Interactive mode
while true; do
    show_menu
    read -p "Select option (1-5): " choice
    
    case "$choice" in
        1)
            list_channels
            read -p "Press Enter to continue..."
            ;;
        2)
            read -p "Enter channel number (0=Ch02, 1=Ch03, etc.): " channel_num
            if [[ "$channel_num" =~ ^[0-9]+$ ]]; then
                create_channel "$channel_num"
            else
                echo -e "${RED}>> Please enter a valid number.${NC}"
            fi
            read -p "Press Enter to continue..."
            ;;
        3)
            list_channels
            read -p "Enter channel name to remove (e.g., Ch02): " channel_name
            if [[ -n "$channel_name" ]]; then
                remove_channel "$channel_name"
            fi
            read -p "Press Enter to continue..."
            ;;
        4)
            show_database_info
            read -p "Press Enter to continue..."
            ;;
        5)
            echo -e "${GREEN}>> Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}>> Invalid choice. Please select 1-5.${NC}"
            read -p "Press Enter to continue..."
            ;;
    esac
done
