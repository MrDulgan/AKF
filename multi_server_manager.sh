#!/bin/bash

# Multi-Server Manager for AKF
# Developer: Dulgan
# This script allows you to manage multiple server instances

# Color codes
RED='\e[0;31m'
GREEN='\e[1;32m'
BLUE='\e[0;36m'
YELLOW='\e[1;33m'
PURPLE='\e[0;35m'
NC='\e[0m'

# Configuration
BASE_DIR="/root"
BASE_NAME="hxsy"
CONFIG_FILE="/root/multi_server.conf"
DB_USER="postgres"

# Default ports for first server (base: hxsy)
# These are the ports used by the original server
declare -a DEFAULT_PORTS=(6543 7777 7878 10320 20060)
declare -a DEFAULT_PORT_NAMES=("LoginServer" "TicketServer" "GatewayServer" "ZoneServer_GM" "ZoneServer_CGI")

# Load existing configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        # Initialize empty arrays
        SERVERS=()
        SERVER_PATHS=()
        SERVER_PORTS=()
    fi
}

# Save configuration
save_config() {
    cat > "$CONFIG_FILE" << EOF
# Multi-Server Configuration
# Generated by AKF Multi-Server Manager

SERVERS=($(printf '"%s" ' "${SERVERS[@]}"))
SERVER_PATHS=($(printf '"%s" ' "${SERVER_PATHS[@]}"))
SERVER_PORTS=($(printf '"%s" ' "${SERVER_PORTS[@]}"))
EOF
    echo -e "${GREEN}>> Configuration saved to $CONFIG_FILE${NC}"
}

# Calculate ports for server instance
calculate_ports() {
    local server_id="$1"
    local port_offset=$((server_id * 100))  # 100 port offset for each server
    local ports=()
    
    # LoginServer port
    ports+=($((6543 + port_offset)))
    # TicketServer port  
    ports+=($((7777 + port_offset)))
    # GatewayServer HTTP port
    ports+=($((7878 + port_offset)))
    # ZoneServer GM Tool port
    ports+=($((10320 + port_offset)))
    # ZoneServer CGI port
    ports+=($((20060 + port_offset)))
    
    echo "${ports[*]}"
}

# Create new server instance
create_server() {
    local server_name="$1"
    local server_id="${#SERVERS[@]}"
    
    echo -e "${BLUE}
==================================================
           Creating New Server Instance
           Server Name: $server_name
           Server ID: $server_id
==================================================${NC}"
    
    # Calculate paths and ports
    local server_path="$BASE_DIR/${BASE_NAME}-${server_name}"
    local server_ports=($(calculate_ports "$server_id"))
    
    echo -e "${BLUE}>> Server will be created at: $server_path${NC}"
    echo -e "${BLUE}>> Ports will be: LoginServer:${server_ports[0]}, TicketServer:${server_ports[1]}, GatewayServer:${server_ports[2]}, ZoneServer_GM:${server_ports[3]}, ZoneServer_CGI:${server_ports[4]}${NC}"
    
    # Confirm creation
    read -p "Continue with server creation? (y/N): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        echo -e "${YELLOW}>> Server creation cancelled.${NC}"
        return 1
    fi
    
    # Check if base server exists
    if [[ ! -d "$BASE_DIR/$BASE_NAME" ]]; then
        echo -e "${RED}>> Base server not found at $BASE_DIR/$BASE_NAME${NC}"
        echo -e "${YELLOW}>> Please run fullinstaller.sh first to create the base server.${NC}"
        return 1
    fi
    
    # Create server directory
    echo -e "${BLUE}>> Copying base server files...${NC}"
    cp -r "$BASE_DIR/$BASE_NAME" "$server_path" || {
        echo -e "${RED}>> Failed to copy server files.${NC}"
        return 1
    }
    
    # Update configuration files
    echo -e "${BLUE}>> Updating server configuration...${NC}"
    update_server_config "$server_path" "${server_ports[*]}" "$server_name" || {
        echo -e "${RED}>> Failed to update configuration.${NC}"
        return 1
    }
    
    # Update database serverstatus
    echo -e "${BLUE}>> Updating database serverstatus...${NC}"
    update_database_serverstatus "$server_name" "${server_ports[*]}" || {
        echo -e "${RED}>> Failed to update database.${NC}"
        return 1
    }
    
    # Add to configuration
    SERVERS+=("$server_name")
    SERVER_PATHS+=("$server_path")
    SERVER_PORTS+=("${server_ports[*]}")
    save_config
    
    echo -e "${GREEN}
==================================================
           Server Created Successfully!
==================================================${NC}"
    echo -e "Server Name: ${GREEN}$server_name${NC}"
    echo -e "Path: ${GREEN}$server_path${NC}"
    echo -e "LoginServer Port: ${GREEN}${server_ports[0]}${NC}"
    echo -e "TicketServer Port: ${GREEN}${server_ports[1]}${NC}"
    echo -e "GatewayServer Port: ${GREEN}${server_ports[2]}${NC}"
    echo -e "ZoneServer GM Port: ${GREEN}${server_ports[3]}${NC}"
    echo -e "ZoneServer CGI Port: ${GREEN}${server_ports[4]}${NC}"
    echo -e "\nTo start this server:"
    echo -e "  ${BLUE}$server_path/start${NC}"
}

# Update database serverstatus table
update_database_serverstatus() {
    local server_name="$1"
    local ports=($2)
    
    # Read database password
    read -s -p "Enter PostgreSQL password: " db_pass
    echo
    
    # Get current server's IP (should be same as base server)
    local server_ip=$(PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -t -c "SELECT DISTINCT ext_address FROM serverstatus WHERE name = 'LoginServer';" 2>/dev/null | xargs)
    
    if [[ -z "$server_ip" || "$server_ip" == "none" ]]; then
        server_ip="127.0.0.1"  # Default to localhost if not found
    fi
    
    echo -e "${BLUE}   - Using IP address: $server_ip${NC}"
    
    # Create new entries in serverstatus table for this server
    local login_port="${ports[0]}"
    local ticket_port="${ports[1]}"
    local gateway_port="${ports[2]}"
    
    echo -e "${BLUE}   - Adding LoginServer-${server_name} with port ${login_port}...${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        INSERT INTO serverstatus (name, ext_address, int_address, port, curuser, maxuser, status)
        VALUES ('LoginServer-${server_name}', '${server_ip}', '${server_ip}', ${login_port}, 0, 1000, 1)
        ON CONFLICT (name) DO UPDATE SET 
            ext_address = '${server_ip}', 
            int_address = '${server_ip}', 
            port = ${login_port};
    " >/dev/null 2>&1
    
    echo -e "${BLUE}   - Adding TicketServer-${server_name} with port ${ticket_port}...${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        INSERT INTO serverstatus (name, ext_address, int_address, port, curuser, maxuser, status)
        VALUES ('TicketServer-${server_name}', '${server_ip}', '${server_ip}', ${ticket_port}, 0, 1000, 1)
        ON CONFLICT (name) DO UPDATE SET 
            ext_address = '${server_ip}', 
            int_address = '${server_ip}', 
            port = ${ticket_port};
    " >/dev/null 2>&1
    
    echo -e "${BLUE}   - Adding WorldServer-${server_name}...${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        INSERT INTO serverstatus (name, ext_address, int_address, port, curuser, maxuser, status)
        VALUES ('WorldServer-${server_name}', '${server_ip}', '${server_ip}', 0, 0, 1000, 1)
        ON CONFLICT (name) DO UPDATE SET 
            ext_address = '${server_ip}', 
            int_address = '${server_ip}';
    " >/dev/null 2>&1
    
    echo -e "${BLUE}   - Adding ZoneServer-${server_name}...${NC}"
    PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "
        INSERT INTO serverstatus (name, ext_address, int_address, port, curuser, maxuser, status)
        VALUES ('ZoneServer-${server_name}', '${server_ip}', '${server_ip}', 0, 0, 1000, 1)
        ON CONFLICT (name) DO UPDATE SET 
            ext_address = '${server_ip}', 
            int_address = '${server_ip}';
    " >/dev/null 2>&1
    
    echo -e "${GREEN}>> Database serverstatus updated for server: $server_name${NC}"
    return 0
}

# Update server configuration files
update_server_config() {
    local server_path="$1"
    local ports=($2)
    local server_name="$3"
    
    # Extract individual ports
    local login_port="${ports[0]}"
    local ticket_port="${ports[1]}"
    local gateway_port="${ports[2]}"
    local zone_gm_port="${ports[3]}"
    local zone_cgi_port="${ports[4]}"
    
    # Update main setup.ini
    if [[ -f "$server_path/setup.ini" ]]; then
        echo -e "${BLUE}   - Updating main setup.ini...${NC}"
        sed -i "s/TicketServerPort=7777/TicketServerPort=${ticket_port}/g" "$server_path/setup.ini"
    fi
    
    # Update LoginServer setup.ini
    if [[ -f "$server_path/LoginServer/setup.ini" ]]; then
        echo -e "${BLUE}   - Updating LoginServer/setup.ini...${NC}"
        sed -i "s/LoginServerPort=6543/LoginServerPort=${login_port}/g" "$server_path/LoginServer/setup.ini"
    fi
    
    # Update GatewayServer setup.ini  
    if [[ -f "$server_path/GatewayServer/setup.ini" ]]; then
        echo -e "${BLUE}   - Updating GatewayServer/setup.ini...${NC}"
        sed -i "s/HttpServerPort=7878/HttpServerPort=${gateway_port}/g" "$server_path/GatewayServer/setup.ini"
    fi
    
    # Update ZoneServer setup.ini
    if [[ -f "$server_path/ZoneServer/setup.ini" ]]; then
        echo -e "${BLUE}   - Updating ZoneServer/setup.ini...${NC}"
        sed -i "s/GMToolPort=10320/GMToolPort=${zone_gm_port}/g" "$server_path/ZoneServer/setup.ini"
        sed -i "s/CGIPort=20060/CGIPort=${zone_cgi_port}/g" "$server_path/ZoneServer/setup.ini"
        
        # Update ZoneServerID to make it unique
        local zone_id=$((1011 + ${#SERVERS[@]}))
        sed -i "s/ZoneServerID=1011/ZoneServerID=${zone_id}/g" "$server_path/ZoneServer/setup.ini"
    fi
    
    # Update WorldServer setup.ini
    if [[ -f "$server_path/WorldServer/setup.ini" ]]; then
        echo -e "${BLUE}   - Updating WorldServer/setup.ini...${NC}"
        # Update WorldServerID to make it unique  
        local world_id=$((1010 + ${#SERVERS[@]}))
        sed -i "s/WorldServerID=1010/WorldServerID=${world_id}/g" "$server_path/WorldServer/setup.ini"
    fi
    
    # Update config files for unique World IDs
    for config_file in "$server_path"/config*.ini; do
        if [[ -f "$config_file" ]]; then
            echo -e "${BLUE}   - Updating $(basename "$config_file")...${NC}"
            local world_id=$((1010 + ${#SERVERS[@]}))
            sed -i "s/CrossWorldID=1010/CrossWorldID=${world_id}/g" "$config_file"
            sed -i "s/TerritoryWorldID=1010/TerritoryWorldID=${world_id}/g" "$config_file"
            sed -i "s/ColosseumWorldID=1010/ColosseumWorldID=${world_id}/g" "$config_file"
            sed -i "s/WarCampWorldID=1010/WarCampWorldID=${world_id}/g" "$config_file"
            sed -i "s/FamilyWarWorldID=1010/FamilyWarWorldID=${world_id}/g" "$config_file"
            sed -i "s/ManorRanchWorldID=1010/ManorRanchWorldID=${world_id}/g" "$config_file"
            sed -i "s/RaidBattleWorldID=1010/RaidBattleWorldID=${world_id}/g" "$config_file"
        fi
    done
    
    echo -e "${GREEN}>> Server configuration updated for: $server_name${NC}"
    return 0
}

# List all servers
list_servers() {
    echo -e "${BLUE}
==================================================
           Multi-Server Status
==================================================${NC}"
    
    if [[ ${#SERVERS[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No additional servers configured.${NC}"
        echo -e "${BLUE}Base server: $BASE_DIR/$BASE_NAME${NC}"
        return
    fi
    
    echo -e "Base server: ${GREEN}$BASE_DIR/$BASE_NAME${NC}"
    echo -e "  Ports: LoginServer:6543, TicketServer:7777, GatewayServer:7878"
    if pgrep -f "$BASE_DIR/$BASE_NAME" > /dev/null; then
        echo -e "  Status: ${GREEN}RUNNING${NC}"
    else
        echo -e "  Status: ${RED}STOPPED${NC}"
    fi
    echo ""
    
    for i in "${!SERVERS[@]}"; do
        local server="${SERVERS[$i]}"
        local path="${SERVER_PATHS[$i]}"
        local ports="${SERVER_PORTS[$i]}"
        local port_array=($ports)
        
        echo -e "${GREEN}Server: $server${NC}"
        echo -e "  Path: $path"
        echo -e "  Ports: LoginServer:${port_array[0]}, TicketServer:${port_array[1]}, GatewayServer:${port_array[2]}"
        echo -e "         ZoneServer_GM:${port_array[3]}, ZoneServer_CGI:${port_array[4]}"
        
        # Check if running
        if pgrep -f "$path" > /dev/null; then
            echo -e "  Status: ${GREEN}RUNNING${NC}"
        else
            echo -e "  Status: ${RED}STOPPED${NC}"
        fi
        echo ""
    done
}

# Start specific server
start_server() {
    local server_name="$1"
    
    for i in "${!SERVERS[@]}"; do
        if [[ "${SERVERS[$i]}" == "$server_name" ]]; then
            local path="${SERVER_PATHS[$i]}"
            echo -e "${BLUE}>> Starting server: $server_name${NC}"
            echo -e "${BLUE}>> Path: $path${NC}"
            
            if [[ -f "$path/start" ]]; then
                "$path/start"
            else
                echo -e "${RED}>> Start script not found: $path/start${NC}"
            fi
            return
        fi
    done
    
    echo -e "${RED}>> Server not found: $server_name${NC}"
}

# Start all servers
start_all_servers() {
    echo -e "${BLUE}>> Starting all servers...${NC}"
    
    # Start base server first
    if [[ -f "$BASE_DIR/$BASE_NAME/start" ]]; then
        echo -e "${GREEN}Starting base server...${NC}"
        "$BASE_DIR/$BASE_NAME/start" &
        sleep 5
    fi
    
    # Start additional servers
    for i in "${!SERVERS[@]}"; do
        local server="${SERVERS[$i]}"
        local path="${SERVER_PATHS[$i]}"
        
        echo -e "${GREEN}Starting server: $server...${NC}"
        if [[ -f "$path/start" ]]; then
            "$path/start" &
            sleep 3
        else
            echo -e "${RED}>> Start script not found: $path/start${NC}"
        fi
    done
    
    echo -e "${GREEN}>> All servers startup initiated.${NC}"
}

# Stop all servers
stop_all_servers() {
    echo -e "${BLUE}>> Stopping all servers...${NC}"
    
    # Stop additional servers first
    for i in "${!SERVERS[@]}"; do
        local server="${SERVERS[$i]}"
        local path="${SERVER_PATHS[$i]}"
        
        echo -e "${YELLOW}Stopping server: $server...${NC}"
        if [[ -f "$path/stop" ]]; then
            "$path/stop" &
        else
            echo -e "${RED}>> Stop script not found: $path/stop${NC}"
        fi
    done
    
    sleep 3
    
    # Stop base server last
    if [[ -f "$BASE_DIR/$BASE_NAME/stop" ]]; then
        echo -e "${YELLOW}Stopping base server...${NC}"
        "$BASE_DIR/$BASE_NAME/stop"
    fi
    
    echo -e "${GREEN}>> All servers shutdown initiated.${NC}"
}

# Remove server instance
remove_server() {
    local server_name="$1"
    
    echo -e "${RED}
==================================================
           WARNING: Server Removal
==================================================${NC}"
    echo -e "${RED}This will permanently delete server: $server_name${NC}"
    echo -e "${RED}Including all configuration files!${NC}"
    echo -e "${YELLOW}Note: Database entries will be cleaned up from serverstatus table.${NC}"
    
    read -p "Type 'DELETE' to confirm removal: " confirm
    if [[ "$confirm" != "DELETE" ]]; then
        echo -e "${YELLOW}>> Server removal cancelled.${NC}"
        return 1
    fi
    
    for i in "${!SERVERS[@]}"; do
        if [[ "${SERVERS[$i]}" == "$server_name" ]]; then
            local path="${SERVER_PATHS[$i]}"
            
            # Stop server if running
            echo -e "${BLUE}>> Stopping server...${NC}"
            stop_server "$server_name"
            sleep 5
            
            # Remove database entries
            echo -e "${BLUE}>> Removing database serverstatus entries...${NC}"
            read -s -p "Enter PostgreSQL password: " db_pass
            echo
            
            for srv in "LoginServer-${server_name}" "TicketServer-${server_name}" "WorldServer-${server_name}" "ZoneServer-${server_name}"; do
                echo -e "${BLUE}   - Removing $srv from serverstatus...${NC}"
                PGPASSWORD="$db_pass" psql -U "$DB_USER" -h localhost -d FFDB1 -c "DELETE FROM serverstatus WHERE name = '$srv';" >/dev/null 2>&1 || true
            done
            
            # Remove files
            echo -e "${BLUE}>> Removing server files...${NC}"
            rm -rf "$path"
            
            # Remove from configuration
            unset SERVERS[$i]
            unset SERVER_PATHS[$i]
            unset SERVER_PORTS[$i]
            
            # Rebuild arrays
            SERVERS=("${SERVERS[@]}")
            SERVER_PATHS=("${SERVER_PATHS[@]}")
            SERVER_PORTS=("${SERVER_PORTS[@]}")
            
            save_config
            
            echo -e "${GREEN}>> Server $server_name removed successfully.${NC}"
            return
        fi
    done
    
    echo -e "${RED}>> Server not found: $server_name${NC}"
}

# Monitor all servers
monitor_all_servers() {
    echo -e "${BLUE}>> Starting monitoring for all servers...${NC}"
    
    # Monitor base server
    echo -e "${GREEN}Base Server Monitoring:${NC}"
    if [[ -f "$BASE_DIR/$BASE_NAME/monitor.sh" ]]; then
        "$BASE_DIR/$BASE_NAME/monitor.sh" &
    fi
    
    # Monitor additional servers
    for i in "${!SERVERS[@]}"; do
        local server="${SERVERS[$i]}"
        local path="${SERVER_PATHS[$i]}"
        
        echo -e "${GREEN}Starting monitor for $server...${NC}"
        if [[ -f "$path/monitor.sh" ]]; then
            "$path/monitor.sh" &
        fi
    done
    
    echo -e "${BLUE}>> All monitors started in background.${NC}"
}

# Main menu
show_menu() {
    echo -e "${BLUE}
==================================================
           AKF Multi-Server Manager
           Developer: Dulgan
==================================================${NC}"
    echo -e "1. List all servers"
    echo -e "2. Create new server"
    echo -e "3. Start specific server"
    echo -e "4. Stop specific server"
    echo -e "5. Remove server"
    echo -e "6. Monitor all servers"
    echo -e "7. Start ALL servers"
    echo -e "8. Stop ALL servers"
    echo -e "9. Exit"
    echo ""
}

# Stop specific server
stop_server() {
    local server_name="$1"
    
    for i in "${!SERVERS[@]}"; do
        if [[ "${SERVERS[$i]}" == "$server_name" ]]; then
            local path="${SERVER_PATHS[$i]}"
            echo -e "${BLUE}>> Stopping server: $server_name${NC}"
            echo -e "${BLUE}>> Path: $path${NC}"
            
            if [[ -f "$path/stop" ]]; then
                "$path/stop"
            else
                echo -e "${RED}>> Stop script not found: $path/stop${NC}"
            fi
            return
        fi
    done
    
    echo -e "${RED}>> Server not found: $server_name${NC}"
}

# Main execution
load_config

if [[ $# -gt 0 ]]; then
    case "$1" in
        "list")
            list_servers
            ;;
        "create")
            if [[ -n "$2" ]]; then
                create_server "$2"
            else
                echo -e "${RED}>> Please provide server name: $0 create <server_name>${NC}"
            fi
            ;;
        "start")
            if [[ -n "$2" ]]; then
                start_server "$2"
            else
                echo -e "${RED}>> Please provide server name: $0 start <server_name>${NC}"
            fi
            ;;
        "start-all")
            start_all_servers
            ;;
        "stop")
            if [[ -n "$2" ]]; then
                stop_server "$2"
            else
                echo -e "${RED}>> Please provide server name: $0 stop <server_name>${NC}"
            fi
            ;;
        "stop-all")
            stop_all_servers
            ;;
        "remove")
            if [[ -n "$2" ]]; then
                remove_server "$2"
            else
                echo -e "${RED}>> Please provide server name: $0 remove <server_name>${NC}"
            fi
            ;;
        "monitor")
            monitor_all_servers
            ;;
        *)
            echo -e "${RED}>> Invalid command. Use: list, create, start, start-all, stop, stop-all, remove, monitor${NC}"
            ;;
    esac
    exit 0
fi

# Interactive mode
while true; do
    show_menu
    read -p "Select option (1-9): " choice
    
    case "$choice" in
        1)
            list_servers
            read -p "Press Enter to continue..."
            ;;
        2)
            read -p "Enter server name: " server_name
            if [[ -n "$server_name" ]]; then
                create_server "$server_name"
            else
                echo -e "${RED}>> Server name cannot be empty.${NC}"
            fi
            read -p "Press Enter to continue..."
            ;;
        3)
            list_servers
            read -p "Enter server name to start: " server_name
            if [[ -n "$server_name" ]]; then
                start_server "$server_name"
            fi
            read -p "Press Enter to continue..."
            ;;
        4)
            list_servers
            read -p "Enter server name to stop: " server_name
            if [[ -n "$server_name" ]]; then
                stop_server "$server_name"
            fi
            read -p "Press Enter to continue..."
            ;;
        5)
            list_servers
            read -p "Enter server name to remove: " server_name
            if [[ -n "$server_name" ]]; then
                remove_server "$server_name"
            fi
            read -p "Press Enter to continue..."
            ;;
        6)
            monitor_all_servers
            read -p "Press Enter to continue..."
            ;;
        7)
            start_all_servers
            read -p "Press Enter to continue..."
            ;;
        8)
            stop_all_servers
            read -p "Press Enter to continue..."
            ;;
        9)
            echo -e "${GREEN}>> Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}>> Invalid choice. Please select 1-9.${NC}"
            read -p "Press Enter to continue..."
            ;;
    esac
done
