#!/bin/bash

# AKUTools Main Menu
# Enhanced management tools for AKF
# Developer: Dulgan

# Color codes
RED='\e[0;31m'
GREEN='\e[1;32m'
BLUE='\e[0;36m'
YELLOW='\e[1;33m'
PURPLE='\e[0;35m'
CYAN='\e[0;96m'
BOLD='\e[1m'
NC='\e[0m'

# Configuration
AKUTOOLS_DIR="/root/AKUTools"
BASE_DIR="/root/hxsy"

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}>> AKUTools must be run as root.${NC}"
    exit 1
fi

# Welcome message
show_welcome() {
    echo -e "${PURPLE}
==================================================
                    AKUTools
          Advanced AKF Management Suite
               Developer: Dulgan
==================================================
${GREEN}Enhanced server management tools with multi-server
and multi-channel support for AKF game servers.${NC}
"
}

# Check tool availability
check_tool_availability() {
    local tool="$1"
    local path="$AKUTOOLS_DIR/$tool"
    
    if [[ -f "$path" && -x "$path" ]]; then
        echo -e "${GREEN}✓${NC}"
    elif [[ -f "$BASE_DIR/$tool" && -x "$BASE_DIR/$tool" ]]; then
        echo -e "${CYAN}⚠${NC}"  # Available in base directory
    else
        echo -e "${RED}✗${NC}"
    fi
}

# Execute tool
execute_tool() {
    local tool="$1"
    local tool_path=""
    
    # First try AKUTools directory
    if [[ -f "$AKUTOOLS_DIR/$tool" && -x "$AKUTOOLS_DIR/$tool" ]]; then
        tool_path="$AKUTOOLS_DIR/$tool"
    # Fallback to base directory
    elif [[ -f "$BASE_DIR/$tool" && -x "$BASE_DIR/$tool" ]]; then
        tool_path="$BASE_DIR/$tool"
    # Special case for server_manager.sh (in current directory)
    elif [[ "$tool" == "server_manager.sh" && -f "$BASE_DIR/server_manager.sh" ]]; then
        tool_path="$BASE_DIR/server_manager.sh"
    else
        echo -e "${RED}>> Tool '$tool' not found or not executable.${NC}"
        echo -e "${YELLOW}>> Please make sure all AKUTools are properly installed.${NC}"
        return 1
    fi
    
    echo -e "${BLUE}>> Launching $tool...${NC}"
    
    # Clear screen and execute
    clear
    "$tool_path"
    
    # Return to menu after tool execution
    echo
    echo -e "${BLUE}>> Returning to AKUTools menu...${NC}"
    sleep 2
}

# System status overview
show_system_status() {
    echo -e "${BLUE}
==================================================
              System Status Overview
==================================================${NC}"
    
    # Server instances detection
    local instance_count=0
    local running_count=0
    
    echo -e "${CYAN}🖥️  Server Instances:${NC}"
    
    # Check default instance
    if [[ -d "$BASE_DIR" && -f "$BASE_DIR/TicketServer" ]]; then
        ((instance_count++))
        
        # Count running servers
        local instance_running=0
        for server_type in TicketServer GatewayServer LoginServer MissionServer WorldServer ZoneServer; do
            if pgrep -f "$BASE_DIR/$server_type" > /dev/null 2>&1; then
                ((instance_running++))
            fi
        done
        
        if [[ $instance_running -gt 0 ]]; then
            echo -e "${GREEN}   ✓ default - $instance_running servers running${NC}"
            ((running_count++))
        else
            echo -e "${YELLOW}   ○ default - stopped${NC}"
        fi
        
        # Check channels
        local channel_count=0
        for channel_dir in "$BASE_DIR"/Channel_*; do
            if [[ -d "$channel_dir" ]]; then
                ((channel_count++))
                local channel_name=$(basename "$channel_dir")
                local channel_running=0
                
                for server_type in WorldServer ZoneServer; do
                    if pgrep -f "$channel_dir/$server_type" > /dev/null 2>&1; then
                        ((channel_running++))
                    fi
                done
                
                if [[ $channel_running -gt 0 ]]; then
                    echo -e "${GREEN}     📺 $channel_name - $channel_running servers running${NC}"
                else
                    echo -e "${YELLOW}     📺 $channel_name - stopped${NC}"
                fi
            fi
        done
        
        if [[ $channel_count -gt 0 ]]; then
            echo -e "${BLUE}     Channels: $channel_count${NC}"
        fi
    fi
    
    # Check additional instances
    for instance_dir in /root/hxsy_*; do
        if [[ -d "$instance_dir" && -f "$instance_dir/TicketServer" ]]; then
            ((instance_count++))
            local instance_name=$(basename "$instance_dir")
            
            # Count running servers
            local instance_running=0
            for server_type in TicketServer GatewayServer LoginServer MissionServer WorldServer ZoneServer; do
                if pgrep -f "$instance_dir/$server_type" > /dev/null 2>&1; then
                    ((instance_running++))
                fi
            done
            
            if [[ $instance_running -gt 0 ]]; then
                echo -e "${GREEN}   ✓ $instance_name - $instance_running servers running${NC}"
                ((running_count++))
            else
                echo -e "${YELLOW}   ○ $instance_name - stopped${NC}"
            fi
            
            # Check channels
            local channel_count=0
            for channel_dir in "$instance_dir"/Channel_*; do
                if [[ -d "$channel_dir" ]]; then
                    ((channel_count++))
                fi
            done
            
            if [[ $channel_count -gt 0 ]]; then
                echo -e "${BLUE}     Channels: $channel_count${NC}"
            fi
        fi
    done
    
    echo -e "${BLUE}   Total Instances: $instance_count ($running_count running)${NC}"
    
    # Database status
    echo -e "${CYAN}
🗄️  Database Status:${NC}"
    if systemctl is-active postgresql >/dev/null 2>&1; then
        echo -e "${GREEN}   ✓ PostgreSQL is running${NC}"
        
        # Count databases
        local db_count=$(sudo -u postgres psql -t -c "SELECT count(*) FROM pg_database WHERE datname LIKE 'ffaccount%';" 2>/dev/null | xargs)
        echo -e "${BLUE}   Game Databases: ${db_count:-0}${NC}"
    else
        echo -e "${RED}   ✗ PostgreSQL is not running${NC}"
    fi
    
    # System resources
    echo -e "${CYAN}
📊 System Resources:${NC}"
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
    local mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
    local disk_usage=$(df -h / | awk 'NR==2{print $5}' | sed 's/%//')
    
    echo -e "${BLUE}   CPU Usage: ${cpu_usage}%${NC}"
    echo -e "${BLUE}   Memory Usage: ${mem_usage}%${NC}"
    echo -e "${BLUE}   Disk Usage: ${disk_usage}%${NC}"
    
    echo -e "${PURPLE}==================================================${NC}"
}

# Main menu
show_main_menu() {
    while true; do
        clear
        show_welcome
        
        echo -e "${PURPLE}
==================================================
                   Main Menu
==================================================${NC}"
        
        # Show tool availability
        echo -e "${GREEN}Server Management:${NC}"
        echo -e "${GREEN}1.${NC} Enhanced Server Manager      $(check_tool_availability "server_manager.sh")"
        echo -e "${GREEN}2.${NC} Enhanced Monitor             $(check_tool_availability "monitor.sh")"
        echo -e "${GREEN}3.${NC} Account Creator              $(check_tool_availability "account_creator.sh")"
        
        echo -e "${GREEN}
Data Management:${NC}"
        echo -e "${GREEN}4.${NC} Backup Manager               $(check_tool_availability "backup.sh")"
        echo -e "${GREEN}5.${NC} Restore Manager              $(check_tool_availability "restore.sh")"
        
        echo -e "${GREEN}
System:${NC}"
        echo -e "${GREEN}6.${NC} System Status Overview"
        echo -e "${GREEN}7.${NC} Security Functions           $(check_tool_availability "security_functions.sh")"
        
        echo -e "${GREEN}
Server Control:${NC}"
        echo -e "${GREEN}8.${NC} Start All Servers            $(check_tool_availability "start")"
        echo -e "${GREEN}9.${NC} Stop All Servers             $(check_tool_availability "stop")"
        
        echo -e "${GREEN}
${GREEN}0.${NC} Exit AKUTools
==================================================${NC}"
        
        echo -e "${BLUE}Legend: ${GREEN}✓${NC}=Available ${CYAN}⚠${NC}=Base Location ${RED}✗${NC}=Missing${NC}"
        echo
        read -p "Select option (0-9): " choice
        
        case "$choice" in
            1)
                execute_tool "server_manager.sh"
                ;;
            2)
                execute_tool "monitor.sh"
                ;;
            3)
                execute_tool "account_creator.sh"
                ;;
            4)
                execute_tool "backup.sh"
                ;;
            5)
                execute_tool "restore.sh"
                ;;
            6)
                clear
                show_system_status
                echo
                read -p "Press Enter to continue..."
                ;;
            7)
                execute_tool "security_functions.sh"
                ;;
            8)
                if [[ -f "$BASE_DIR/start" ]]; then
                    echo -e "${BLUE}>> Starting all servers...${NC}"
                    cd "$BASE_DIR"
                    ./start
                    echo
                    read -p "Press Enter to continue..."
                else
                    echo -e "${RED}>> Start script not found.${NC}"
                    read -p "Press Enter to continue..."
                fi
                ;;
            9)
                if [[ -f "$BASE_DIR/stop" ]]; then
                    echo -e "${BLUE}>> Stopping all servers...${NC}"
                    cd "$BASE_DIR"
                    ./stop
                    echo
                    read -p "Press Enter to continue..."
                else
                    echo -e "${RED}>> Stop script not found.${NC}"
                    read -p "Press Enter to continue..."
                fi
                ;;
            0)
                echo -e "${GREEN}
==================================================
        Thank you for using AKUTools!
        
        Enhanced AKF Management Suite
               Developer: Dulgan
==================================================${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}>> Invalid option. Please try again.${NC}"
                sleep 2
                ;;
        esac
    done
}

# Help information
show_help() {
    echo -e "${BLUE}
AKUTools - Advanced AKF Management Suite

Usage: ./akutools [option]

Options:
  No arguments - Show interactive main menu
  help         - Show this help information
  status       - Show system status overview

Features:
  • Enhanced Server Manager - Create and manage multiple server instances
  • Multi-Channel Support - Add channels to any server instance  
  • Enhanced Monitoring - Real-time monitoring with instance switching
  • Account Creation - Automated game account creation
  • Backup/Restore - Complete data management
  • Security Functions - Advanced security features
  • Integrated Start/Stop - Quick server control

For more information, visit the main menu.
${NC}"
}

# Main execution
case "${1:-}" in
    "help"|"-h"|"--help")
        show_help
        ;;
    "status")
        show_system_status
        ;;
    "")
        show_main_menu
        ;;
    *)
        echo -e "${RED}>> Unknown option: $1${NC}"
        echo -e "${YELLOW}>> Use './akutools help' for usage information.${NC}"
        exit 1
        ;;
esac
